plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.7.10"
    id("io.micronaut.test-resources") version "3.7.10"
}

version = "0.1"
group = "todo.microservice"

repositories {
    mavenCentral()
}

dependencies {
    // Serdes for JSON
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    implementation("io.micronaut.serde:micronaut-serde-jackson")

    // HTTP request validation
    annotationProcessor("io.micronaut:micronaut-http-validation")

    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.sql:micronaut-hibernate-jpa")
    implementation("jakarta.annotation:jakarta.annotation-api")
    runtimeOnly("org.mariadb.jdbc:mariadb-java-client")

    // Declarative HTTP client and circuit breaker
    implementation("io.micronaut:micronaut-http-client")

    // Basic Kafka support
    implementation("io.micronaut.kafka:micronaut-kafka")

    // Kafka Streams support (requires having at least one stream, or build will fail)
    implementation("io.micronaut.kafka:micronaut-kafka-streams")

    // Logging via Logback
    runtimeOnly("ch.qos.logback:logback-classic")

    // Native image
    annotationProcessor("io.micronaut:micronaut-graal")
    compileOnly("org.graalvm.nativeimage:svm")

    // Caching and any other useful data structures
    implementation("com.google.guava:guava:32.1.2-jre")
}


application {
    mainClass.set("todo.microservice.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("todo.microservice.*")
    }
}

// We need the C++ standard library for RocksDB (used by Kafka Streams),
// and the glibc compatibility layer.
tasks.named("dockerfile") {
  baseImage = "eclipse-temurin:11-alpine"
  instruction "RUN apk add --no-cache libstdc++ gcompat"
}
